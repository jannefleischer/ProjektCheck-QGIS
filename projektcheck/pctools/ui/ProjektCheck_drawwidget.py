# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ProjektCheckDockWidget
                                 A QGIS plugin
 ProjektCheck
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-02-21
        git sha              : $Format:%H$
        copyright            : (C) 2019 by GGR
        email                : franke@ggr-planung.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import pyqtSignal, Qt
from qgis.gui import QgsMapToolEmitPoint, QgsRubberBand
from PyQt5.QtGui import QCursor
from qgis.core import QgsVectorLayer, QgsFeature, QgsPointXY, QgsRectangle

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ProjektCheck_dockwidget_drawing.ui'))


#class TestWidget(QtWidgets.QWidget):
#    def __init__(self):
#        QtWidgets.QWidget.__init__(self)
#        uic.loadUi(os.path.join(
#            os.path.dirname(__file__), 'testwidget.ui'), self)


class ProjektCheckDrawWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, canvas, parent=None):
        """Constructor."""
        super(ProjektCheckDrawWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.canvas = canvas
        self.rectangle_tool = RectangleMapTool(self.canvas)
        #self.rectangle_button.clicked.connect(self.draw_rectangle)
        self.rectangle_tool.deactivated.connect(
            lambda: self.deactivate(self.rectangle_button))

        self.polygon_tool = PolygonMapTool(self.canvas)
        #self.polygon_button.clicked.connect(self.draw_polygon)
        self.polygon_tool.deactivated.connect(
            lambda: self.deactivate(self.polygon_button))

        #self.widget1 = TestWidget()
        #self.tab.layout().addWidget(self.widget1)
        #self.widget2 = TestWidget()
        #self.tab_2.layout().addWidget(self.widget2)

    def deactivate(self, button):
        button.setChecked(False)

    def draw_rectangle(self):
        self.canvas.setMapTool(self.rectangle_tool)
        cursor = QCursor(Qt.CrossCursor)
        self.canvas.setCursor(cursor)

    def draw_polygon(self):
        self.canvas.setMapTool(self.polygon_tool)
        cursor = QCursor(Qt.CrossCursor)
        self.canvas.setCursor(cursor)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()


class RectangleMapTool(QgsMapToolEmitPoint):
    deactivated = pyqtSignal()
    def __init__(self, canvas):
        self.canvas = canvas
        QgsMapToolEmitPoint.__init__(self, self.canvas)
        self.rubber_band = QgsRubberBand(self.canvas, True)
        self.rubber_band.setColor(Qt.red)
        self.rubber_band.setWidth(1)
        self.reset()

    def reset(self):
        self.startPoint = self.endPoint = None
        self.isEmittingPoint = False
        self.rubber_band.reset(True)

    def canvasPressEvent(self, e):
        self.startPoint = self.toMapCoordinates(e.pos())
        self.endPoint = self.startPoint
        self.isEmittingPoint = True
        self.showRect(self.startPoint, self.endPoint)

    def canvasReleaseEvent(self, e):
        self.isEmittingPoint = False
        r = self.rectangle()
        if r is not None:
            print("Rectangle:", r.xMinimum(), r.yMinimum(), r.xMaximum(), r.yMaximum())

    def canvasMoveEvent(self, e):
        if not self.isEmittingPoint:
            return

        self.endPoint = self.toMapCoordinates(e.pos())
        self.showRect(self.startPoint, self.endPoint)

    def showRect(self, startPoint, endPoint):
        self.rubber_band.reset(True)
        if startPoint.x() == endPoint.x() or startPoint.y() == endPoint.y():
            return

        point1 = QgsPointXY(startPoint.x(), startPoint.y())
        point2 = QgsPointXY(startPoint.x(), endPoint.y())
        point3 = QgsPointXY(endPoint.x(), endPoint.y())
        point4 = QgsPointXY(endPoint.x(), startPoint.y())

        self.rubber_band.addPoint(point1, False)
        self.rubber_band.addPoint(point2, False)
        self.rubber_band.addPoint(point3, False)
        self.rubber_band.addPoint(point4, False)
        self.rubber_band.addPoint(point1, True)# true to update canvas
        self.rubber_band.show()

    def rectangle(self):
        if self.startPoint is None or self.endPoint is None:
            return None
        elif self.startPoint.x() == self.endPoint.x() or self.startPoint.y() == self.endPoint.y():
            return None

        return QgsRectangle(self.startPoint, self.endPoint)

    def deactivate(self):
        super(RectangleMapTool, self).deactivate()
        self.rubber_band.reset(True)
        self.deactivated.emit()


class PolygonMapTool(QgsMapToolEmitPoint):
    deactivated = pyqtSignal()
    def __init__(self, canvas):
        self.canvas = canvas
        QgsMapToolEmitPoint.__init__(self, self.canvas)
        self.rubber_band = QgsRubberBand(self.canvas, True)
        self.rubber_band.setColor(Qt.blue)
        self.rubber_band.setWidth(1)

        self.move_band = QgsRubberBand(self.canvas, True)
        self.move_band.setColor(Qt.blue)
        self.move_band.setWidth(1)
        self.reset()

    def reset(self):
        self.rubber_band.reset(True)
        self.move_band.reset(True)
        self.last_point = None

    def canvasDoubleClickEvent(self, e):
        self.reset()

    def canvasMoveEvent(self, e):
        if self.last_point:
            self.move_band.reset(True)
            self.move_band.addPoint(self.last_point, False)
            point = self.toMapCoordinates(e.pos())
            point = QgsPointXY(point.x(), point.y())
            self.move_band.addPoint(point, True)

    def canvasPressEvent(self, e):
        self.move_band.reset(True)
        if(e.button() == Qt.RightButton):
            self.reset()
            return
        point = self.toMapCoordinates(e.pos())
        self.last_point = QgsPointXY(point.x(), point.y())
        self.rubber_band.addPoint(self.last_point, True)

    def deactivate(self):
        super(PolygonMapTool, self).deactivate()
        self.reset()
        self.deactivated.emit()
