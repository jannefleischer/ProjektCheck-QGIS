# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ProjektCheckDockWidget
                                 A QGIS plugin
 ProjektCheck
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-02-21
        git sha              : $Format:%H$
        copyright            : (C) 2019 by GGR
        email                : franke@ggr-planung.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import subprocess

from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import pyqtSignal

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ProjektCheck_dockwidget_base.ui'))


class ProjektCheckDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(ProjektCheckDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
#        self.pandas_button.clicked.connect(self.install_pandas)
        
#    def install_pandas(self):
#        print('hallo')
#        dir_path = os.path.dirname(os.path.realpath(__file__))
#        print(dir_path)
#        process = subprocess.Popen(os.path.join(dir_path, 'install-pandas.bat'), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
#        #process = subprocess.Popen(['runas', '/user:Administrator', '/noprofile', os.path.join(dir_path, 'install-pandas.bat')], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,stdin=subprocess.PIPE)#os.path.join(dir_path, 'install-pandas.bat')])
#        #process.stdin.write(b'')
#        stdout, stderr = process.communicate()
#        print('STDOUT:{}'.format(stdout))
#        print('STDERR:{}'.format(stderr))

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
