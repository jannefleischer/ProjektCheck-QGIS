# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ProjektCheckDockWidget
                                 A QGIS plugin
 ProjektCheck
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-02-21
        git sha              : $Format:%H$
        copyright            : (C) 2019 by GGR
        email                : franke@ggr-planung.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import subprocess
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWidgets import QAction, QMenu

from pctools.base.domain import PCDockWidget


class ProjektCheckMainDockWidget(PCDockWidget):

    ui_file = 'ProjektCheck_dockwidget_base.ui'

    def setupUi(self):
        #self.ui.pandas_button.clicked.connect(self.install_pandas)

        self.project_combo.addItem("Projekt Bli")
        self.project_combo.addItem("Projekt Bla")
        self.project_combo.addItem("Projekt Blubb")

        self.domain_button.setMenu(self.example_menu())

    def example_menu(self):
        tool_menu = QMenu()
        for i in range(3):
            action = tool_menu.addAction("Action {}".format(i))
        for i in range(3):
            action = tool_menu.addAction("Checkable Action {}".format(i))
            action.setCheckable(True)
        submenu = tool_menu.addMenu('submenu')
        submenu2 = tool_menu.addMenu('submenu')
        submenu2.addAction("Action".format(i))
        submenu3 = tool_menu.addMenu('submenu')
        submenu4 = submenu.addMenu('submenu')
        for i in range(3):
            action = submenu4.addAction("Action {}".format(i))
        submenu = tool_menu.addMenu('submenu')
        return tool_menu

    def install_pandas(self):
        dir_path = os.path.dirname(os.path.realpath(__file__))
        process = subprocess.Popen(os.path.join(dir_path, 'install-pandas.bat'),
                                   shell=True, stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        #process = subprocess.Popen(['runas', '/user:Administrator', '/noprofile', os.path.join(dir_path, 'install-pandas.bat')], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,stdin=subprocess.PIPE)#os.path.join(dir_path, 'install-pandas.bat')])
        #process.stdin.write(b'')
        stdout, stderr = process.communicate()
        print('STDOUT:{}'.format(stdout))
        print('STDERR:{}'.format(stderr))
